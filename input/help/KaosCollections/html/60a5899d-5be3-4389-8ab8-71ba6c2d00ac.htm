<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Internal Structure</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="60a5899d-5be3-4389-8ab8-71ba6c2d00ac" /><meta name="Description" content="Microsoft-supplied sorted classes internally use a binary tree data structure. This structure has some negative space and performance implications:" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Kaos.Collections Library<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="bd99e66d-09ef-4adc-89eb-db2aaf89e8ad.htm" title="Kaos.Collections Library" tocid="roottoc">Kaos.Collections Library</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="bd99e66d-09ef-4adc-89eb-db2aaf89e8ad.htm" title="Welcome to KaosCollections" tocid="bd99e66d-09ef-4adc-89eb-db2aaf89e8ad">Welcome to KaosCollections</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="937c1b5d-48fb-470d-8145-85fc116e2b22.htm" title="API Comparisons" tocid="937c1b5d-48fb-470d-8145-85fc116e2b22">API Comparisons</a></div><div class="toclevel1 current" data-toclevel="1"><a data-tochassubtree="false" href="60a5899d-5be3-4389-8ab8-71ba6c2d00ac.htm" title="Internal Structure" tocid="60a5899d-5be3-4389-8ab8-71ba6c2d00ac">Internal Structure</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="90402bce-1f31-45f8-b0ea-0a73408bd45a.htm" title="Version History" tocid="90402bce-1f31-45f8-b0ea-0a73408bd45a">Version History</a></div><div class="toclevel1" data-toclevel="1"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="ea382f9d-d870-8b02-657d-aa381c4ea035.htm" title="Kaos.Collections" tocid="ea382f9d-d870-8b02-657d-aa381c4ea035">Kaos.Collections</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/KaosCollections-Help.png" /></td><td class="titleColumn"><h1>Internal Structure</h1></td></tr></table><span class="introStyle"></span> <div class="introduction"><p>
        Microsoft-supplied sorted classes internally use a binary tree data structure.
        This structure has some negative space and performance implications:
      </p><ul><li><p>Elements require individual allocations increasing space requirements.</p></li><li><p>Elements require individual allocations eliminating locality speed advantages.</p></li><li><p>Enumeration requires a tree traversal with a callback for each element.</p></li><li><p>Accessing the first and last elements require traversing from root to leaf.</p></li></ul></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Internal data structure used by KaosCollections
    </span></div><div id="ID0RBSection" class="collapsibleSection"><p>
          The data structure used by all ranked classes is an order statistic B+ tree variant.
          A tree becomes an order statistic tree with the addition of two traits:
        </p><ul><li><p>
              Select(<em>i</em>) — find the <em>i</em>'th smallest element in the tree (i.e. retrieve key by index).
            </p></li><li><p>
              Rank(<em>x</em>) – find the rank of item <em>x</em> in the tree (i.e. retrieve index by key).
              The names of the classes in the KaosCollections library are derived from this operation.
            </p></li></ul><p>
          As a B+ tree, all elements are stored in leaf nodes at the same depth.
          The leaf level is a sorted doubly linked list with head and tail pointers.
          The first key of every leaf (except the leftmost) is copied to one branch for subdividing.
          A tree with no elements is represented as an empty leaf.
        </p><p>
          This structure differs from a common B+ tree in three ways:
        </p><ul><li><p>
              While the root may contain as few as two children, other rightmost branches may contain as few as one child.
              This variation optimizes for time and space when bulk loading of presorted data
              and improves seek performance for data near the end of the collection - both common operations.
              All other branches maintain at least 50% capacity usage following every add and remove operation.
            </p></li><li><p>
              The rightmost leaf may contain as few as one item.
              Again, this variation optimizes the structure for bulk loading of presorted data.
              All other leaves maintain at least 50% capacity usage following every add and remove operation.
            </p></li><li><p>
              Every branch stores the number of elements (weight) in all of its descendent leaves.
              For example, the weight of the root is the total number of elements in every leaf.
            </p></li></ul></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID1RBSection" class="collapsibleSection"><h4 class="subHeading">Other Resources</h4><div class="seeAlsoStyle"><a href="https://en.wikipedia.org/wiki/B%2Btree" title="B+ tree" target="_blank">wikipedia.org/wiki/B+tree</a></div><div class="seeAlsoStyle"><a href="https://en.wikipedia.org/wiki/Order_statistic_tree" title="Order statistic tree" target="_blank">wikipedia.org/wiki/Order_statistic_tree</a></div></div></div></div><div id="pageFooter" class="pageFooter"><p>[v3.0.0.2] Copyright © 2009-2017 Kasey O. (github.com/kaosborn)</p></div></body></html>